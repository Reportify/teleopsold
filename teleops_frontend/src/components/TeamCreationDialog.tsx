// Team Creation Dialog Component
import React, { useState, useEffect, useMemo, useRef } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  Chip,
  Grid,
  Card,
  CardContent,
  IconButton,
  Divider,
  FormHelperText,
  Autocomplete,
  ToggleButtonGroup,
  ToggleButton,
} from "@mui/material";
import {
  Close,
  Group,
  Add,
  Settings,
  Person,
  AutoAwesome,
  Business,
  Engineering,
} from "@mui/icons-material";
import { TeamCreateData, User, EnhancedUserProfile } from "../types/user";
import { generateUniqueVLTTeamName } from "../utils/teamNaming";

interface TeamCreationDialogProps {
  open: boolean;
  onClose: () => void;
  onCreateTeam: (teamData: TeamCreateData) => Promise<void>;
  loading?: boolean;
  availableUsers?: EnhancedUserProfile[];
  existingTeamNames?: string[];
  onMemberTypeChange?: (memberType: "field" | "non_field") => void;
}

interface FormErrors {
  name?: string;
  description?: string;
  team_leader_id?: string;
  team_member_ids?: string;
}

const TeamCreationDialog: React.FC<TeamCreationDialogProps> = ({
  open,
  onClose,
  onCreateTeam,
  loading = false,
  availableUsers = [],
  existingTeamNames = [],
  onMemberTypeChange,
}) => {
  const [formData, setFormData] = useState<TeamCreateData>({
    name: "",
    description: "",
  });
  
  const [selectedTeamLeader, setSelectedTeamLeader] = useState<EnhancedUserProfile | null>(null);
  const [selectedTeamMembers, setSelectedTeamMembers] = useState<EnhancedUserProfile[]>([]);
  const [autoGeneratedName, setAutoGeneratedName] = useState<string>("");
  const [errors, setErrors] = useState<FormErrors>({});
  const [submitError, setSubmitError] = useState<string>("");
  const [memberType, setMemberType] = useState<"field" | "non_field">("field");
  const prevMemberTypeRef = useRef<"field" | "non_field">("field");

  // Calculate team member options with stable reference
  const teamMemberOptions = useMemo(() => {
    const filteredUsers = availableUsers.filter(user => 
      (user.user?.id || user.id) !== (selectedTeamLeader?.user?.id || selectedTeamLeader?.id)
    );
    
    // Include selected members that might not be in the filtered list
    const selectedMemberIds = selectedTeamMembers.map(member => member.user?.id || member.id);
    const missingMembers = selectedTeamMembers.filter(member => 
      !filteredUsers.find(user => (user.user?.id || user.id) === (member.user?.id || member.id))
    );
    
    return [...missingMembers, ...filteredUsers];
  }, [availableUsers, selectedTeamLeader, selectedTeamMembers]);

  // Generate VLT-style team name when team leader is selected
  useEffect(() => {
    if (selectedTeamLeader) {
      const generatedName = generateUniqueVLTTeamName(
        {
          id: selectedTeamLeader.user?.id || selectedTeamLeader.id,
          username: selectedTeamLeader.user?.username || '',
          first_name: selectedTeamLeader.user?.first_name || '',
          last_name: selectedTeamLeader.user?.last_name || '',
        },
        existingTeamNames
      );
      setAutoGeneratedName(generatedName);
      setFormData(prev => ({ ...prev, name: generatedName }));
    }
  }, [selectedTeamLeader, existingTeamNames]);

  // Handle member type change
  useEffect(() => {
    // Only run if member type actually changed
    if (prevMemberTypeRef.current !== memberType) {
      if (onMemberTypeChange) {
        onMemberTypeChange(memberType);
      }
      
      // Only reset team leader if they don't match the new member type
      if (selectedTeamLeader) {
        const leaderMatchesType = 
          selectedTeamLeader.designation?.designation_type === memberType ||
          selectedTeamLeader.all_designations?.some(d => d.designation_type === memberType);
        
        if (!leaderMatchesType) {
          setSelectedTeamLeader(null);
          setFormData(prev => ({ ...prev, name: "" }));
          setAutoGeneratedName("");
        }
      }
      
      // Only reset team members that don't match the new member type
      if (selectedTeamMembers.length > 0) {
        const compatibleMembers = selectedTeamMembers.filter(member => {
          return member.designation?.designation_type === memberType ||
                 member.all_designations?.some(d => d.designation_type === memberType);
        });
        setSelectedTeamMembers(compatibleMembers);
      }
      
      // Update the ref
      prevMemberTypeRef.current = memberType;
    }
  }, [memberType, onMemberTypeChange, selectedTeamLeader, selectedTeamMembers]);



  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    if (!selectedTeamLeader) {
      newErrors.name = "Team leader is required for automatic name generation";
    }



    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    try {
      setSubmitError("");
      const teamData: TeamCreateData = {
        ...formData,
        team_leader_id: (selectedTeamLeader?.user?.id || selectedTeamLeader?.id)?.toString(),
        team_member_ids: selectedTeamMembers.map(member => (member.user?.id || member.id)?.toString()),
      };
      await onCreateTeam(teamData);
      handleClose();
    } catch (error) {
      setSubmitError(error instanceof Error ? error.message : "Failed to create team");
    }
  };

  const handleClose = () => {
    setFormData({
      name: "",
      description: "",
    });
    setErrors({});
    setSubmitError("");
    setSelectedTeamLeader(null);
    setSelectedTeamMembers([]);
    setAutoGeneratedName("");
    setMemberType("field");
    onClose();
  };

  const handleInputChange = (field: keyof TeamCreateData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };



  return (
    <Dialog
      open={open}
      onClose={handleClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        sx: {
          borderRadius: 2,
          minHeight: "600px",
        },
      }}
    >
      <DialogTitle
        sx={{
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          pb: 1,
        }}
      >
        <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
          <Group color="primary" />
          <Typography variant="h6" component="div">
            Create New Team
          </Typography>
        </Box>
        <IconButton onClick={handleClose} size="small">
          <Close />
        </IconButton>
      </DialogTitle>

      <Divider />

      <DialogContent sx={{ pt: 3 }}>
        <Grid container spacing={3}>
          {/* Basic Information */}
          <Grid size={{ xs: 12 }}>
            <Typography variant="h6" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
              <Group fontSize="small" />
              Basic Information
            </Typography>
          </Grid>

          {/* Member Type Selection */}
          <Grid size={{ xs: 12 }}>
            <Box>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                Member Type
              </Typography>
              <ToggleButtonGroup
                value={memberType}
                exclusive
                onChange={(_, newValue) => newValue && setMemberType(newValue)}
                aria-label="member type"
                fullWidth
                sx={{ mb: 1 }}
              >
                <ToggleButton value="field" aria-label="field members">
                  <Engineering sx={{ mr: 1 }} />
                  Field Members
                </ToggleButton>
                <ToggleButton value="non_field" aria-label="non-field members">
                  <Business sx={{ mr: 1 }} />
                  Non-Field Members
                </ToggleButton>
              </ToggleButtonGroup>
              <FormHelperText>
                {memberType === "field" 
                  ? "Select field workers and technicians for operational tasks" 
                  : "Select office staff and administrative personnel"}
              </FormHelperText>
            </Box>
          </Grid>

          {/* Team Leader Selection */}
          <Grid size={{ xs: 12 }}>
            <Autocomplete
              options={selectedTeamLeader && !availableUsers.find(user => (user.user?.id || user.id) === (selectedTeamLeader.user?.id || selectedTeamLeader.id)) 
                ? [selectedTeamLeader, ...availableUsers] 
                : availableUsers}
              getOptionLabel={(option) => `${option.user?.first_name || ''} ${option.user?.last_name || ''} (${option.user?.email || ''})`}
              value={selectedTeamLeader}
              onChange={(_, newValue) => setSelectedTeamLeader(newValue)}
              isOptionEqualToValue={(option, value) => (option.user?.id || option.id) === (value.user?.id || value.id)}
              renderInput={(params) => (
                <TextField
                  {...params}
                  label="Team Leader"
                  placeholder="Select a team leader"
                  error={!!errors.name}
                  helperText={errors.name || "Team name will be automatically generated based on the selected leader"}
                  required
                  InputProps={{
                    ...params.InputProps,
                    startAdornment: <Person sx={{ mr: 1, color: 'text.secondary' }} />,
                  }}
                />
              )}
              renderOption={(props, option) => (
                <Box component="li" {...props}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Person fontSize="small" />
                    <Box>
                      <Typography variant="body2">
                        {option.user?.first_name} {option.user?.last_name}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        {option.user?.email}
                      </Typography>
                    </Box>
                  </Box>
                </Box>
              )}
            />
          </Grid>

          {/* Team Members Selection */}
          <Grid size={{ xs: 12 }}>
            <Autocomplete
              multiple
              options={teamMemberOptions}
              getOptionLabel={(option) => `${option.user?.first_name || ''} ${option.user?.last_name || ''} (${option.user?.email || ''})`}
              value={selectedTeamMembers}
              onChange={(_, newValue) => setSelectedTeamMembers(newValue || [])}
              isOptionEqualToValue={(option, value) => (option.user?.id || option.id) === (value.user?.id || value.id)}
              renderInput={(params) => (
                <TextField
                  {...params}
                  label="Team Members"
                  placeholder="Select team members (optional)"
                  helperText={`Selected ${selectedTeamMembers.length} member${selectedTeamMembers.length !== 1 ? 's' : ''}`}
                  InputProps={{
                    ...params.InputProps,
                    startAdornment: (
                      <>
                        <Group sx={{ mr: 1, color: 'text.secondary' }} />
                        {params.InputProps.startAdornment}
                      </>
                    ),
                  }}
                />
              )}
              renderTags={(value, getTagProps) =>
                value.map((option, index) => (
                  <Chip
                    variant="outlined"
                    label={`${option.user?.first_name || ''} ${option.user?.last_name || ''}`}
                    size="small"
                    {...getTagProps({ index })}
                    key={option.user?.id || option.id}
                  />
                ))
              }
              renderOption={(props, option) => (
                <Box component="li" {...props}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Person fontSize="small" />
                    <Box>
                      <Typography variant="body2">
                        {option.user?.first_name} {option.user?.last_name}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        {option.user?.email}
                      </Typography>
                    </Box>
                  </Box>
                </Box>
              )}
              disabled={!selectedTeamLeader}
            />
          </Grid>

          {/* Auto-Generated Team Name Preview */}
          {autoGeneratedName && (
            <Grid size={{ xs: 12 }}>
              <Alert 
                severity="info" 
                icon={<AutoAwesome />}
                sx={{ 
                  backgroundColor: 'rgba(25, 118, 210, 0.04)',
                  border: '1px solid rgba(25, 118, 210, 0.2)'
                }}
              >
                <Typography variant="body2" sx={{ fontWeight: 500 }}>
                  Auto-Generated Team Name: <strong>{autoGeneratedName}</strong>
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Following VLT naming convention: {selectedTeamLeader?.user?.first_name || 'Leader'}-{new Date().toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: '2-digit' }).replace(/\s/g, '-')}
                </Typography>
              </Alert>
            </Grid>
          )}



          <Grid size={{ xs: 12 }}>
            <TextField
              fullWidth
              label="Description"
              value={formData.description}
              onChange={(e) => handleInputChange("description", e.target.value)}
              error={!!errors.description}
              helperText={errors.description || `${formData.description?.length || 0}/500 characters`}
              placeholder="Describe the team's purpose and responsibilities"
              multiline
              rows={3}
            />
          </Grid>



          {/* Team Configuration */}
          <Grid size={{ xs: 12 }}>
            <Typography variant="h6" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1, mt: 2 }}>
              <Settings fontSize="small" />
              Configuration
            </Typography>
          </Grid>



          {/* Team Summary */}
          {selectedTeamLeader && (
            <Grid size={{ xs: 12 }}>
              <Card sx={{ backgroundColor: "background.default", mt: 2 }}>
                <CardContent>
                  <Typography variant="h6" gutterBottom sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                    <Group fontSize="small" />
                    Team Summary
                  </Typography>
                  <Grid container spacing={2}>
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Typography variant="body2" color="text.secondary">
                        Name
                      </Typography>
                      <Typography variant="body1" fontWeight="medium">
                        {formData.name || "Not specified"}
                      </Typography>
                    </Grid>

                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Typography variant="body2" color="text.secondary">
                        Status
                      </Typography>
                      <Chip label="Active" color="success" size="small" />
                    </Grid>

                    {selectedTeamLeader && (
                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Typography variant="body2" color="text.secondary">
                          Team Leader
                        </Typography>
                        <Box>
                          <Typography variant="body1" fontWeight="medium">
                            {selectedTeamLeader.user?.first_name} {selectedTeamLeader.user?.last_name}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            {selectedTeamLeader.user?.email}
                          </Typography>
                        </Box>
                      </Grid>
                    )}

                    {selectedTeamMembers.length > 0 && (
                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Typography variant="body2" color="text.secondary">
                          Team Members ({selectedTeamMembers.length})
                        </Typography>
                        <Box sx={{ mt: 0.5 }}>
                          {selectedTeamMembers.map((member, index) => (
                            <Box key={member.user?.id || member.id} sx={{ mb: index < selectedTeamMembers.length - 1 ? 1 : 0 }}>
                              <Typography variant="body2" fontWeight="medium">
                                {member.user?.first_name} {member.user?.last_name}
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                {member.user?.email}
                              </Typography>
                            </Box>
                          ))}
                        </Box>
                      </Grid>
                    )}
                  </Grid>
                </CardContent>
              </Card>
            </Grid>
          )}

           {/* Error Display */}
           {submitError && (
             <Grid size={{ xs: 12 }}>
               <Alert severity="error" sx={{ mt: 2 }}>
                 {submitError}
               </Alert>
             </Grid>
           )}
        </Grid>
      </DialogContent>

      <Divider />

      <DialogActions sx={{ p: 3, gap: 1 }}>
        <Button onClick={handleClose} variant="outlined" disabled={loading}>
          Cancel
        </Button>
        <Button
          onClick={handleSubmit}
          variant="contained"
          disabled={loading || !formData.name.trim()}
          startIcon={<Add />}
          sx={{ minWidth: 120 }}
        >
          {loading ? "Creating..." : "Create Team"}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default TeamCreationDialog;