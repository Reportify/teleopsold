# Generated by Django 4.2.10 on 2025-01-10 12:00

from django.db import migrations, models
import django.db.models.deletion


def populate_null_task_fields(apps, schema_editor):
    """
    Populate NULL task fields with a default task.
    This is required before making the field non-nullable.
    """
    TaskAllocation = apps.get_model('tasks', 'TaskAllocation')
    TaskFromFlow = apps.get_model('tasks', 'TaskFromFlow')
    
    # Find allocations with NULL task field
    null_task_allocations = TaskAllocation.objects.filter(task__isnull=True)
    
    if null_task_allocations.exists():
        # Try to find a default task to assign
        default_task = TaskFromFlow.objects.first()
        
        if default_task:
            # Update all NULL task allocations with the default task
            null_task_allocations.update(task=default_task)
            print(f"Updated {null_task_allocations.count()} TaskAllocation records with default task: {default_task}")
        else:
            # If no tasks exist, create a placeholder task
            from django.contrib.auth import get_user_model
            User = get_user_model()
            
            # Try to get a user for the created_by field
            user = User.objects.first()
            if not user:
                # Create a system user if none exists
                user = User.objects.create_user(
                    username='system_migration',
                    email='system@migration.local',
                    first_name='System',
                    last_name='Migration'
                )
            
            # Create a placeholder task
            placeholder_task = TaskFromFlow.objects.create(
                task_name='Migration Placeholder Task',
                task_description='Placeholder task created during migration to handle NULL task references',
                status='pending',
                created_by=user
            )
            
            # Update all NULL task allocations with the placeholder task
            null_task_allocations.update(task=placeholder_task)
            print(f"Created placeholder task and updated {null_task_allocations.count()} TaskAllocation records")


def reverse_populate_null_task_fields(apps, schema_editor):
    """
    Reverse operation - this is not easily reversible since we don't know
    which tasks were originally NULL. We'll leave the data as is.
    """
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('tasks', '0020_create_allocation_models'),
    ]

    operations = [
        # First, populate NULL task fields with default values
        migrations.RunPython(
            populate_null_task_fields,
            reverse_populate_null_task_fields,
        ),
        # Then make the task field non-nullable
        migrations.AlterField(
            model_name='taskallocation',
            name='task',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='allocations',
                to='tasks.taskfromflow'
            ),
        ),
    ]