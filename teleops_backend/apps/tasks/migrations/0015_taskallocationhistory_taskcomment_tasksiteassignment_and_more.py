# Generated by Django 4.2.10 on 2025-09-09 21:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("sites", "0006_bulkuploadjob_detailed_errors"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("tenants", "0032_transfer_circle_vendor_data"),
        ("tasks", "0014_merge_20250910_0212"),
    ]

    operations = [
        migrations.CreateModel(
            name="TaskAllocationHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("created", "Created"),
                            ("updated", "Updated"),
                            ("status_changed", "Status Changed"),
                            ("reallocated", "Reallocated"),
                            ("cancelled", "Cancelled"),
                            ("completed", "Completed"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "previous_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("allocated", "Allocated"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("reallocated", "Reallocated"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "new_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("allocated", "Allocated"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("reallocated", "Reallocated"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("change_reason", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Task Allocation History",
                "verbose_name_plural": "Task Allocation History",
                "db_table": "task_allocation_history",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "comment_type",
                    models.CharField(
                        choices=[
                            ("general", "General Comment"),
                            ("progress", "Progress Update"),
                            ("issue", "Issue/Problem"),
                            ("equipment", "Equipment Note"),
                            ("safety", "Safety Note"),
                            ("quality", "Quality Note"),
                            ("completion", "Completion Note"),
                        ],
                        default="general",
                        max_length=20,
                    ),
                ),
                ("comment", models.TextField()),
                (
                    "is_internal",
                    models.BooleanField(
                        default=False,
                        help_text="Whether comment is internal only (not visible to all team members)",
                    ),
                ),
                (
                    "attachments",
                    models.JSONField(
                        default=list, help_text="List of attachment file paths"
                    ),
                ),
                ("is_pinned", models.BooleanField(default=False)),
                (
                    "visibility_scope",
                    models.CharField(
                        choices=[
                            ("all", "All Team Members"),
                            ("supervisors", "Supervisors Only"),
                            ("assignees", "Assignees Only"),
                        ],
                        default="all",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("edited_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "task_comments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskSiteAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "assignment_order",
                    models.IntegerField(
                        default=1, help_text="Order in which sites should be processed"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "site_specific_instructions",
                    models.TextField(
                        blank=True, help_text="Instructions specific to this site"
                    ),
                ),
                (
                    "estimated_hours_at_site",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "actual_hours_at_site",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "scheduled_start_at_site",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("scheduled_end_at_site", models.DateTimeField(blank=True, null=True)),
                ("actual_start_at_site", models.DateTimeField(blank=True, null=True)),
                ("actual_end_at_site", models.DateTimeField(blank=True, null=True)),
                (
                    "progress_percentage",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("completion_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "task_site_assignments",
                "ordering": ["assignment_order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskSubActivityAllocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("allocated", "Allocated"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("reallocated", "Reallocated"),
                        ],
                        default="allocated",
                        max_length=20,
                    ),
                ),
                (
                    "progress_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MinValueValidator(100),
                        ],
                    ),
                ),
                (
                    "estimated_duration_hours",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "actual_duration_hours",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Task Sub-Activity Allocation",
                "verbose_name_plural": "Task Sub-Activity Allocations",
                "db_table": "task_sub_activity_allocations",
            },
        ),
        migrations.CreateModel(
            name="TaskTeamAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("lead", "Team Lead"),
                            ("technician", "Technician"),
                            ("engineer", "Engineer"),
                            ("supervisor", "Supervisor"),
                            ("assistant", "Assistant"),
                            ("specialist", "Specialist"),
                            ("safety_officer", "Safety Officer"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False, help_text="Whether this is the primary assignee"
                    ),
                ),
                ("assigned_date", models.DateField(auto_now_add=True)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "estimated_hours",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "actual_hours",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                ("assignment_notes", models.TextField(blank=True)),
            ],
            options={
                "db_table": "task_team_assignments",
            },
        ),
        migrations.CreateModel(
            name="TaskTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("installation", "Installation"),
                            ("maintenance", "Maintenance"),
                            ("dismantling", "Dismantling"),
                            ("survey", "Survey"),
                            ("audit", "Audit"),
                            ("repair", "Repair"),
                            ("upgrade", "Upgrade"),
                            ("testing", "Testing"),
                            ("commissioning", "Commissioning"),
                            ("rf_survey", "RF Survey"),
                            ("emf_survey", "EMF Survey"),
                            ("rfi_survey", "RFI Survey"),
                            ("transportation", "Transportation"),
                            ("packaging", "Packaging"),
                            ("deviation_email", "Deviation Email"),
                            ("rsa", "RSA"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "default_priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "default_estimated_hours",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                ("template_instructions", models.TextField(blank=True)),
                ("safety_requirements_template", models.TextField(blank=True)),
                ("equipment_verification_required", models.BooleanField(default=False)),
                (
                    "checklist_template",
                    models.JSONField(
                        default=list, help_text="Template checklist items"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("usage_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "task_templates",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TaskTimeline",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("created", "Task Created"),
                            ("allocated", "Allocated to Vendor"),
                            ("assigned", "Assigned to Internal Team"),
                            ("work_started", "Work Started"),
                            ("work_completed", "Work Completed"),
                            ("cancelled", "Cancelled"),
                            ("reallocated", "Reallocated"),
                            ("status_changed", "Status Changed"),
                            ("progress_updated", "Progress Updated"),
                            ("comment_added", "Comment Added"),
                            ("equipment_verified", "Equipment Verified"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "event_data",
                    models.JSONField(
                        blank=True, default=dict, help_text="Store relevant event data"
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Task Timeline Event",
                "verbose_name_plural": "Task Timeline Events",
                "db_table": "task_timeline",
                "ordering": ["timestamp"],
            },
        ),
        migrations.AlterUniqueTogether(
            name="task",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="task",
            name="assigned_to",
        ),
        migrations.RemoveField(
            model_name="task",
            name="created_by",
        ),
        migrations.RemoveField(
            model_name="task",
            name="equipment_verified_by",
        ),
        migrations.RemoveField(
            model_name="task",
            name="primary_site",
        ),
        migrations.RemoveField(
            model_name="task",
            name="project",
        ),
        migrations.RemoveField(
            model_name="task",
            name="supervisor",
        ),
        migrations.RemoveField(
            model_name="task",
            name="tenant",
        ),
        migrations.RemoveConstraint(
            model_name="flowactivity",
            name="unique_flow_activity_order",
        ),
        migrations.RemoveConstraint(
            model_name="flowsite",
            name="unique_flow_site",
        ),
        migrations.RemoveConstraint(
            model_name="flowtemplate",
            name="unique_tenant_flow_name",
        ),
        migrations.RemoveConstraint(
            model_name="taskfromflow",
            name="unique_tenant_task_id",
        ),
        migrations.RemoveConstraint(
            model_name="taskfromflow",
            name="unique_tenant_client_task_id",
        ),
        migrations.RemoveConstraint(
            model_name="tasksitegroup",
            name="unique_task_site_alias",
        ),
        migrations.RemoveConstraint(
            model_name="tasksubactivity",
            name="unique_task_sequence_order",
        ),
        migrations.RemoveField(
            model_name="flowinstance",
            name="task_id",
        ),
        migrations.RemoveField(
            model_name="taskallocation",
            name="task",
        ),
        migrations.AddField(
            model_name="flowinstance",
            name="task_from_flow",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="flow_instances",
                to="tasks.taskfromflow",
            ),
        ),
        migrations.AddField(
            model_name="taskallocation",
            name="actual_duration_hours",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text="Actual duration in hours",
                max_digits=8,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="taskallocation",
            name="allocated_at",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="taskallocation",
            name="task_from_flow",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="allocations",
                to="tasks.taskfromflow",
            ),
        ),
        migrations.AlterField(
            model_name="flowactivity",
            name="activity_type",
            field=models.CharField(
                choices=[
                    ("installation", "Installation"),
                    ("maintenance", "Maintenance"),
                    ("dismantling", "Dismantling"),
                    ("survey", "Survey"),
                    ("audit", "Audit"),
                    ("repair", "Repair"),
                    ("upgrade", "Upgrade"),
                    ("testing", "Testing"),
                    ("commissioning", "Commissioning"),
                    ("rf_survey", "RF Survey"),
                    ("emf_survey", "EMF Survey"),
                    ("rfi_survey", "RFI Survey"),
                    ("transportation", "Transportation"),
                    ("packaging", "Packaging"),
                    ("deviation_email", "Deviation Email"),
                    ("rsa", "RSA"),
                ],
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="flowactivity",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, editable=False, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="flowinstance",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, editable=False, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="flowsite",
            name="alias",
            field=models.CharField(
                blank=True,
                help_text="Custom name for this site in the flow",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="flowsite",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, editable=False, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="flowsite",
            name="order",
            field=models.IntegerField(
                default=0, help_text="Order of this site in the flow"
            ),
        ),
        migrations.AlterField(
            model_name="flowtemplate",
            name="category",
            field=models.CharField(
                choices=[
                    ("DISMANTLING", "Dismantling"),
                    ("INSTALLATION", "Installation"),
                    ("MAINTENANCE", "Maintenance"),
                    ("SURVEY", "Survey"),
                    ("LOGISTICS", "Logistics"),
                    ("COMMISSIONING", "Commissioning"),
                    ("RELOCATION", "Relocation"),
                    ("CUSTOM", "Custom"),
                ],
                default="CUSTOM",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="flowtemplate",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, editable=False, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="taskallocation",
            name="allocated_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="allocated_tasks",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="taskallocation",
            name="estimated_duration_hours",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text="Estimated duration in hours",
                max_digits=8,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="taskallocation",
            name="status",
            field=models.CharField(
                choices=[
                    ("allocated", "Allocated"),
                    ("in_progress", "In Progress"),
                    ("completed", "Completed"),
                    ("cancelled", "Cancelled"),
                    ("reallocated", "Reallocated"),
                ],
                default="allocated",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="taskallocation",
            name="updated_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_task_allocations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="taskallocation",
            name="vendor_relationship",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="task_allocations",
                to="tenants.clientvendorrelationship",
            ),
        ),
        migrations.AlterField(
            model_name="taskfromflow",
            name="client_task_id",
            field=models.CharField(
                blank=True,
                help_text="Client's internal task ID",
                max_length=100,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="taskfromflow",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_flow_tasks",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="taskfromflow",
            name="description",
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name="taskfromflow",
            name="is_client_id_provided",
            field=models.BooleanField(
                default=False, help_text="Whether client provided the task ID"
            ),
        ),
        migrations.AlterField(
            model_name="taskfromflow",
            name="status",
            field=models.CharField(
                choices=[
                    ("pending", "Pending"),
                    ("assigned", "Assigned"),
                    ("allocated", "Allocated"),
                    ("in_progress", "In Progress"),
                    ("equipment_verification", "Equipment Verification"),
                    ("completed", "Completed"),
                    ("cancelled", "Cancelled"),
                    ("on_hold", "On Hold"),
                    ("failed", "Failed"),
                    ("rework_required", "Rework Required"),
                ],
                default="pending",
                max_length=25,
            ),
        ),
        migrations.AlterField(
            model_name="taskfromflow",
            name="task_name",
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name="tasksubactivity",
            name="progress_percentage",
            field=models.IntegerField(
                default=0,
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MinValueValidator(100),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="tasksubactivity",
            name="status",
            field=models.CharField(
                choices=[
                    ("pending", "Pending"),
                    ("assigned", "Assigned"),
                    ("allocated", "Allocated"),
                    ("in_progress", "In Progress"),
                    ("equipment_verification", "Equipment Verification"),
                    ("completed", "Completed"),
                    ("cancelled", "Cancelled"),
                    ("on_hold", "On Hold"),
                    ("failed", "Failed"),
                    ("rework_required", "Rework Required"),
                ],
                default="pending",
                max_length=25,
            ),
        ),
        migrations.AlterUniqueTogether(
            name="flowactivity",
            unique_together={("flow_template", "sequence_order")},
        ),
        migrations.AlterUniqueTogether(
            name="flowsite",
            unique_together={("flow_template", "site")},
        ),
        migrations.AlterUniqueTogether(
            name="flowtemplate",
            unique_together={("tenant", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="taskfromflow",
            unique_together={("tenant", "task_id"), ("tenant", "client_task_id")},
        ),
        migrations.AlterUniqueTogether(
            name="tasksitegroup",
            unique_together={("task_from_flow", "site_alias")},
        ),
        migrations.AlterUniqueTogether(
            name="tasksubactivity",
            unique_together={("task_from_flow", "sequence_order")},
        ),
        migrations.AddIndex(
            model_name="taskallocation",
            index=models.Index(
                fields=["task_from_flow"], name="task_alloca_task_fr_f72343_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskallocation",
            index=models.Index(
                fields=["allocation_type"], name="task_alloca_allocat_1ae45f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskallocation",
            index=models.Index(fields=["status"], name="task_alloca_status_092a08_idx"),
        ),
        migrations.AddIndex(
            model_name="taskallocation",
            index=models.Index(
                fields=["vendor_relationship"], name="task_alloca_vendor__78e79e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskallocation",
            index=models.Index(
                fields=["internal_team"], name="task_alloca_interna_8467ea_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskallocation",
            index=models.Index(
                fields=["allocated_by"], name="task_alloca_allocat_88b029_idx"
            ),
        ),
        migrations.AlterModelTable(
            name="taskallocation",
            table="task_allocations",
        ),
        migrations.DeleteModel(
            name="Task",
        ),
        migrations.AddField(
            model_name="tasktimeline",
            name="task_from_flow",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="timeline_events",
                to="tasks.taskfromflow",
            ),
        ),
        migrations.AddField(
            model_name="tasktimeline",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="task_timeline_events",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="tasktemplate",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_task_templates",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="tasktemplate",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="task_templates",
                to="tenants.tenant",
            ),
        ),
        migrations.AddField(
            model_name="taskteamassignment",
            name="task_from_flow",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="team_assignments",
                to="tasks.taskfromflow",
            ),
        ),
        migrations.AddField(
            model_name="taskteamassignment",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="tasksubactivityallocation",
            name="allocation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sub_activity_allocations",
                to="tasks.taskallocation",
            ),
        ),
        migrations.AddField(
            model_name="tasksubactivityallocation",
            name="sub_activity",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="allocation_details",
                to="tasks.tasksubactivity",
            ),
        ),
        migrations.AddField(
            model_name="tasksiteassignment",
            name="site",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sites.site"
            ),
        ),
        migrations.AddField(
            model_name="tasksiteassignment",
            name="task_from_flow",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="site_assignments",
                to="tasks.taskfromflow",
            ),
        ),
        migrations.AddField(
            model_name="taskcomment",
            name="task_from_flow",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comments",
                to="tasks.taskfromflow",
            ),
        ),
        migrations.AddField(
            model_name="taskcomment",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="task_comments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="taskallocationhistory",
            name="allocation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="history",
                to="tasks.taskallocation",
            ),
        ),
        migrations.AddField(
            model_name="taskallocationhistory",
            name="changed_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="allocation_changes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RemoveField(
            model_name="taskfromflow",
            name="actual_end",
        ),
        migrations.RemoveField(
            model_name="taskfromflow",
            name="actual_start",
        ),
        migrations.AddField(
            model_name="taskallocation",
            name="allocated_sub_activities",
            field=models.ManyToManyField(
                related_name="allocations",
                through="tasks.TaskSubActivityAllocation",
                to="tasks.tasksubactivity",
            ),
        ),
        migrations.AddIndex(
            model_name="tasktimeline",
            index=models.Index(
                fields=["task_from_flow"], name="task_timeli_task_fr_971b0d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tasktimeline",
            index=models.Index(
                fields=["event_type"], name="task_timeli_event_t_3001eb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tasktimeline",
            index=models.Index(
                fields=["timestamp"], name="task_timeli_timesta_9da1b3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tasktimeline",
            index=models.Index(fields=["user"], name="task_timeli_user_id_9fddc9_idx"),
        ),
        migrations.AddIndex(
            model_name="tasktemplate",
            index=models.Index(
                fields=["tenant", "is_active"], name="task_templa_tenant__3f8f1b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tasktemplate",
            index=models.Index(
                fields=["task_type"], name="task_templa_task_ty_5939dd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tasktemplate",
            index=models.Index(
                fields=["usage_count"], name="task_templa_usage_c_1891bd_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tasktemplate",
            unique_together={("tenant", "name")},
        ),
        migrations.AddIndex(
            model_name="taskteamassignment",
            index=models.Index(
                fields=["task_from_flow", "is_active"],
                name="task_team_a_task_fr_a96f74_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="taskteamassignment",
            index=models.Index(
                fields=["user", "is_active"], name="task_team_a_user_id_bfe157_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskteamassignment",
            index=models.Index(fields=["role"], name="task_team_a_role_ae08c9_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="taskteamassignment",
            unique_together={("task_from_flow", "user")},
        ),
        migrations.AddIndex(
            model_name="tasksubactivityallocation",
            index=models.Index(
                fields=["allocation"], name="task_sub_ac_allocat_7f188b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tasksubactivityallocation",
            index=models.Index(
                fields=["sub_activity"], name="task_sub_ac_sub_act_106837_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tasksubactivityallocation",
            index=models.Index(fields=["status"], name="task_sub_ac_status_1ded79_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="tasksubactivityallocation",
            unique_together={("allocation", "sub_activity")},
        ),
        migrations.AddIndex(
            model_name="tasksiteassignment",
            index=models.Index(
                fields=["task_from_flow", "status"],
                name="task_site_a_task_fr_764334_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tasksiteassignment",
            index=models.Index(
                fields=["site", "status"], name="task_site_a_site_id_6b038c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tasksiteassignment",
            index=models.Index(
                fields=["assignment_order"], name="task_site_a_assignm_5a3018_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tasksiteassignment",
            unique_together={("task_from_flow", "site")},
        ),
        migrations.AddIndex(
            model_name="taskcomment",
            index=models.Index(
                fields=["task_from_flow", "created_at"],
                name="task_commen_task_fr_8990c0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="taskcomment",
            index=models.Index(
                fields=["user", "created_at"], name="task_commen_user_id_20ebd0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskcomment",
            index=models.Index(
                fields=["comment_type"], name="task_commen_comment_243d34_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskcomment",
            index=models.Index(
                fields=["is_pinned"], name="task_commen_is_pinn_62db28_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskallocationhistory",
            index=models.Index(
                fields=["allocation"], name="task_alloca_allocat_e7451a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskallocationhistory",
            index=models.Index(fields=["action"], name="task_alloca_action_f1d9e3_idx"),
        ),
        migrations.AddIndex(
            model_name="taskallocationhistory",
            index=models.Index(
                fields=["changed_by"], name="task_alloca_changed_9bae77_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskallocationhistory",
            index=models.Index(
                fields=["created_at"], name="task_alloca_created_1d99a0_idx"
            ),
        ),
    ]
