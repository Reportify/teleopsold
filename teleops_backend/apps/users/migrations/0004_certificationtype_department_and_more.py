# Generated by Django 4.2.10 on 2025-07-22 20:34

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("tenants", "0020_designation_management"),
        ("apps_users", "0003_alter_user_user_type"),
    ]

    operations = [
        migrations.CreateModel(
            name="CertificationType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True)),
                (
                    "category",
                    models.CharField(
                        default="Custom",
                        help_text="Category of certification (Safety, Technical, Medical, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "is_predefined",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a system-predefined certification",
                    ),
                ),
                (
                    "is_mandatory_for_field",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this certification is mandatory for field work",
                    ),
                ),
                (
                    "validity_period_days",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of days this certification is valid (null = no expiry)",
                        null=True,
                    ),
                ),
                (
                    "renewal_required",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this certification requires renewal",
                    ),
                ),
                (
                    "advance_notification_days",
                    models.IntegerField(
                        default=30, help_text="Days before expiry to send notification"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_certification_types",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certification_types",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Certification Type",
                "verbose_name_plural": "Certification Types",
                "db_table": "certification_types",
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True)),
                (
                    "is_operational",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this department handles field operations",
                    ),
                ),
                (
                    "requires_safety_training",
                    models.BooleanField(
                        default=False,
                        help_text="Whether employees in this department need safety training",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_departments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sub_departments",
                        to="apps_users.department",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vendor_departments",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Department",
                "verbose_name_plural": "Departments",
                "db_table": "vendor_departments",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="VendorOperationalDesignation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Designation title (e.g., Site Engineer, Safety Officer)",
                        max_length=255,
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique identifier within tenant", max_length=100
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "is_field_designation",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this designation involves field operations",
                    ),
                ),
                (
                    "requires_supervision",
                    models.BooleanField(
                        default=False,
                        help_text="Whether employees with this designation need supervision",
                    ),
                ),
                (
                    "can_supervise_others",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this designation can supervise other employees",
                    ),
                ),
                (
                    "max_team_size",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum team size this designation can manage",
                        null=True,
                    ),
                ),
                (
                    "rbac_permissions",
                    models.JSONField(
                        default=list,
                        help_text="RBAC permissions associated with this designation",
                    ),
                ),
                (
                    "hierarchy_level",
                    models.IntegerField(
                        default=1, help_text="Hierarchy level (1=highest)"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_operational_designations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="designations",
                        to="apps_users.department",
                    ),
                ),
                (
                    "parent_designation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subordinate_designations",
                        to="apps_users.vendoroperationaldesignation",
                    ),
                ),
                (
                    "required_certifications",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Certifications required for this designation",
                        related_name="required_for_designations",
                        to="apps_users.certificationtype",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vendor_operational_designations",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vendor Operational Designation",
                "verbose_name_plural": "Vendor Operational Designations",
                "db_table": "vendor_operational_designations",
                "ordering": ["hierarchy_level", "name"],
            },
        ),
        migrations.CreateModel(
            name="VendorEmployee",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(max_length=20)),
                (
                    "employee_id",
                    models.CharField(
                        help_text="Vendor's internal employee ID", max_length=50
                    ),
                ),
                ("date_of_joining", models.DateField(default=datetime.date.today)),
                (
                    "employment_type",
                    models.CharField(
                        default="Full-time",
                        help_text="Full-time, Part-time, Contract, etc.",
                        max_length=50,
                    ),
                ),
                (
                    "is_field_ready",
                    models.BooleanField(
                        default=False,
                        help_text="Whether employee has all required certifications for field work",
                    ),
                ),
                (
                    "last_certification_check",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time certification status was checked",
                        null=True,
                    ),
                ),
                ("address", models.TextField(blank=True)),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=255),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=20),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Active", "Active"),
                            ("Inactive", "Inactive"),
                            ("Suspended", "Suspended"),
                            ("Terminated", "Terminated"),
                        ],
                        default="Active",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_vendor_employees",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "designation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="employees",
                        to="apps_users.vendoroperationaldesignation",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vendor_employees",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vendor Employee",
                "verbose_name_plural": "Vendor Employees",
                "db_table": "vendor_employees",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="EmployeeCertification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("certificate_number", models.CharField(blank=True, max_length=100)),
                ("issuing_authority", models.CharField(blank=True, max_length=255)),
                ("issue_date", models.DateField()),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True,
                        help_text="Leave blank if certification doesn't expire",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Active", "Active"),
                            ("Expired", "Expired"),
                            ("Suspended", "Suspended"),
                            ("Revoked", "Revoked"),
                        ],
                        default="Active",
                        max_length=20,
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether certification has been verified by supervisor",
                    ),
                ),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("expiry_notification_sent", models.BooleanField(default=False)),
                ("last_reminder_sent", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("renewal_required", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "certification_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="employee_certifications",
                        to="apps_users.certificationtype",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_employee_certifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certifications",
                        to="apps_users.vendoremployee",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_certifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Employee Certification",
                "verbose_name_plural": "Employee Certifications",
                "db_table": "employee_certifications",
                "ordering": ["-issue_date"],
            },
        ),
        migrations.AddIndex(
            model_name="vendoroperationaldesignation",
            index=models.Index(
                fields=["tenant", "is_active"], name="vendor_oper_tenant__4ad917_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendoroperationaldesignation",
            index=models.Index(
                fields=["tenant", "code"], name="vendor_oper_tenant__d8a3b2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendoroperationaldesignation",
            index=models.Index(
                fields=["department"], name="vendor_oper_departm_2416e3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendoroperationaldesignation",
            index=models.Index(
                fields=["is_field_designation"], name="vendor_oper_is_fiel_801090_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendoroperationaldesignation",
            index=models.Index(
                fields=["hierarchy_level"], name="vendor_oper_hierarc_8517ce_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="vendoroperationaldesignation",
            unique_together={("tenant", "code")},
        ),
        migrations.AddIndex(
            model_name="vendoremployee",
            index=models.Index(
                fields=["tenant", "status"], name="vendor_empl_tenant__5c5aad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendoremployee",
            index=models.Index(
                fields=["tenant", "employee_id"], name="vendor_empl_tenant__fba05a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendoremployee",
            index=models.Index(
                fields=["designation"], name="vendor_empl_designa_e0cbea_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendoremployee",
            index=models.Index(
                fields=["is_field_ready"], name="vendor_empl_is_fiel_c5a149_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vendoremployee",
            index=models.Index(
                fields=["date_of_joining"], name="vendor_empl_date_of_5cf90d_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="vendoremployee",
            unique_together={("tenant", "email"), ("tenant", "employee_id")},
        ),
        migrations.AddIndex(
            model_name="employeecertification",
            index=models.Index(
                fields=["employee", "status"], name="employee_ce_employe_0dc887_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="employeecertification",
            index=models.Index(
                fields=["certification_type"], name="employee_ce_certifi_61aabf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="employeecertification",
            index=models.Index(
                fields=["expiry_date"], name="employee_ce_expiry__560862_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="employeecertification",
            index=models.Index(fields=["status"], name="employee_ce_status_d6a2ab_idx"),
        ),
        migrations.AddIndex(
            model_name="employeecertification",
            index=models.Index(
                fields=["is_verified"], name="employee_ce_is_veri_349932_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="employeecertification",
            unique_together={("employee", "certification_type")},
        ),
        migrations.AddIndex(
            model_name="department",
            index=models.Index(
                fields=["tenant", "is_active"], name="vendor_depa_tenant__251061_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="department",
            index=models.Index(
                fields=["tenant", "code"], name="vendor_depa_tenant__4a9714_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="department",
            index=models.Index(
                fields=["parent_department"], name="vendor_depa_parent__d57cce_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="department",
            unique_together={("tenant", "code")},
        ),
        migrations.AddIndex(
            model_name="certificationtype",
            index=models.Index(
                fields=["tenant", "is_active"], name="certificati_tenant__744af1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="certificationtype",
            index=models.Index(
                fields=["tenant", "code"], name="certificati_tenant__5570fc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="certificationtype",
            index=models.Index(
                fields=["category"], name="certificati_categor_9c19f1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="certificationtype",
            index=models.Index(
                fields=["is_mandatory_for_field"], name="certificati_is_mand_b63881_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="certificationtype",
            unique_together={("tenant", "code")},
        ),
    ]
