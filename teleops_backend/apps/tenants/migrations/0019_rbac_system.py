# Generated by Django 4.2.10 on 2025-07-22 16:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        (
            "tenants",
            "0018_comprehensivedesignation_custompermission_systemrole_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="PermissionGroup",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("group_name", models.CharField(max_length=100)),
                ("group_code", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True)),
                (
                    "group_type",
                    models.CharField(
                        choices=[
                            ("functional", "Functional"),
                            ("project", "Project"),
                            ("temporary", "Temporary"),
                            ("administrative", "Administrative"),
                        ],
                        default="functional",
                        max_length=50,
                    ),
                ),
                ("is_system_group", models.BooleanField(default=False)),
                ("is_assignable", models.BooleanField(default=True)),
                ("auto_assign_conditions", models.JSONField(default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permission_groups",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Permission Group",
                "verbose_name_plural": "Permission Groups",
                "db_table": "permission_groups",
            },
        ),
        migrations.CreateModel(
            name="PermissionRegistry",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("permission_name", models.CharField(max_length=100)),
                ("permission_code", models.CharField(max_length=100)),
                ("permission_category", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True)),
                (
                    "permission_type",
                    models.CharField(
                        choices=[
                            ("action", "Action"),
                            ("access", "Access"),
                            ("data", "Data"),
                            ("administrative", "Administrative"),
                            ("system", "System"),
                        ],
                        default="action",
                        max_length=50,
                    ),
                ),
                ("is_system_permission", models.BooleanField(default=False)),
                ("requires_scope", models.BooleanField(default=False)),
                ("is_delegatable", models.BooleanField(default=True)),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="low",
                        max_length=20,
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        blank=True,
                        help_text="What resource this permission applies to",
                        max_length=50,
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        blank=True,
                        help_text="What action this permission allows",
                        max_length=50,
                    ),
                ),
                (
                    "effect",
                    models.CharField(
                        choices=[("allow", "Allow"), ("deny", "Deny")],
                        default="allow",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_auditable", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permission_registry",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Permission Registry",
                "verbose_name_plural": "Permission Registry",
                "db_table": "permission_registry",
                "ordering": ["permission_category", "permission_name"],
            },
        ),
        migrations.AlterField(
            model_name="designationpermission",
            name="granted_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="granted_legacy_designation_permissions",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="designationpermission",
            name="revoked_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="revoked_legacy_designation_permissions",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="PermissionGroupPermission",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "permission_level",
                    models.CharField(
                        choices=[
                            ("granted", "Granted"),
                            ("denied", "Denied"),
                            ("conditional", "Conditional"),
                        ],
                        default="granted",
                        max_length=20,
                    ),
                ),
                ("scope_configuration", models.JSONField(default=dict)),
                ("is_mandatory", models.BooleanField(default=False)),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "added_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_permissions",
                        to="tenants.permissiongroup",
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_assignments",
                        to="tenants.permissionregistry",
                    ),
                ),
            ],
            options={
                "verbose_name": "Permission Group Permission",
                "verbose_name_plural": "Permission Group Permissions",
                "db_table": "permission_group_permissions",
            },
        ),
        migrations.CreateModel(
            name="PermissionAuditTrail",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("grant", "Grant"),
                            ("revoke", "Revoke"),
                            ("modify", "Modify"),
                            ("restrict", "Restrict"),
                            ("escalate", "Escalate"),
                            ("expire", "Expire"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        choices=[
                            ("user", "User"),
                            ("designation", "Designation"),
                            ("group", "Group"),
                            ("system", "System"),
                        ],
                        max_length=50,
                    ),
                ),
                ("entity_id", models.BigIntegerField()),
                ("old_value", models.JSONField(blank=True, null=True)),
                ("new_value", models.JSONField(blank=True, null=True)),
                ("change_reason", models.CharField(blank=True, max_length=255)),
                ("business_context", models.TextField(blank=True)),
                ("performed_at", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("session_id", models.CharField(blank=True, max_length=255)),
                ("request_id", models.CharField(blank=True, max_length=255)),
                ("additional_context", models.JSONField(default=dict)),
                (
                    "performed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="tenants.permissionregistry",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permission_audit_trail",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Permission Audit Trail",
                "verbose_name_plural": "Permission Audit Trail",
                "db_table": "permission_audit_trail",
                "ordering": ["-performed_at"],
            },
        ),
        migrations.CreateModel(
            name="DesignationBasePermission",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "permission_level",
                    models.CharField(
                        choices=[
                            ("granted", "Granted"),
                            ("denied", "Denied"),
                            ("conditional", "Conditional"),
                        ],
                        default="granted",
                        max_length=20,
                    ),
                ),
                (
                    "scope_configuration",
                    models.JSONField(
                        default=dict, help_text="Permission scope settings"
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        default=dict, help_text="Conditional permission requirements"
                    ),
                ),
                (
                    "geographic_scope",
                    models.JSONField(default=list, help_text="Geographic limitations"),
                ),
                (
                    "functional_scope",
                    models.JSONField(default=list, help_text="Functional limitations"),
                ),
                (
                    "temporal_scope",
                    models.JSONField(default=dict, help_text="Time-based limitations"),
                ),
                (
                    "is_inherited",
                    models.BooleanField(
                        default=True, help_text="Whether users inherit this permission"
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=False, help_text="Cannot be removed by user overrides"
                    ),
                ),
                (
                    "priority_level",
                    models.IntegerField(default=0, help_text="For conflict resolution"),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "designation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="base_permissions",
                        to="tenants.comprehensivedesignation",
                    ),
                ),
                (
                    "granted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_designation_base_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="designation_assignments",
                        to="tenants.permissionregistry",
                    ),
                ),
            ],
            options={
                "verbose_name": "Designation Base Permission",
                "verbose_name_plural": "Designation Base Permissions",
                "db_table": "designation_base_permissions",
            },
        ),
        migrations.CreateModel(
            name="UserPermissionOverride",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "override_type",
                    models.CharField(
                        choices=[
                            ("addition", "Addition"),
                            ("restriction", "Restriction"),
                            ("modification", "Modification"),
                            ("scope_change", "Scope Change"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "permission_level",
                    models.CharField(
                        choices=[
                            ("granted", "Granted"),
                            ("denied", "Denied"),
                            ("conditional", "Conditional"),
                        ],
                        default="granted",
                        max_length=20,
                    ),
                ),
                ("override_reason", models.CharField(blank=True, max_length=255)),
                ("business_justification", models.TextField(blank=True)),
                ("scope_override", models.JSONField(default=dict)),
                ("geographic_scope_override", models.JSONField(default=list)),
                ("functional_scope_override", models.JSONField(default=list)),
                ("temporal_scope_override", models.JSONField(default=dict)),
                ("conditions", models.JSONField(default=dict)),
                ("approval_required", models.BooleanField(default=False)),
                ("requires_mfa", models.BooleanField(default=False)),
                (
                    "effective_from",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("effective_to", models.DateTimeField(blank=True, null=True)),
                ("is_temporary", models.BooleanField(default=False)),
                ("auto_expire", models.BooleanField(default=False)),
                (
                    "approval_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("expired", "Expired"),
                        ],
                        default="approved",
                        max_length=20,
                    ),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("rejection_reason", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_permission_overrides",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "granted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_permission_overrides",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_overrides",
                        to="tenants.permissionregistry",
                    ),
                ),
                (
                    "user_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permission_overrides",
                        to="tenants.tenantuserprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Permission Override",
                "verbose_name_plural": "User Permission Overrides",
                "db_table": "user_permission_overrides",
                "indexes": [
                    models.Index(
                        fields=["user_profile"], name="user_permis_user_pr_22263b_idx"
                    ),
                    models.Index(
                        fields=["permission"], name="user_permis_permiss_630e65_idx"
                    ),
                    models.Index(
                        fields=["override_type"], name="user_permis_overrid_32f581_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="user_permis_is_acti_f128b9_idx"
                    ),
                    models.Index(
                        fields=["effective_from", "effective_to"],
                        name="user_permis_effecti_006783_idx",
                    ),
                ],
                "unique_together": {("user_profile", "permission", "override_type")},
            },
        ),
        migrations.CreateModel(
            name="UserPermissionGroupAssignment",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("assignment_reason", models.CharField(blank=True, max_length=255)),
                ("scope_override", models.JSONField(default=dict)),
                (
                    "effective_from",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("effective_to", models.DateTimeField(blank=True, null=True)),
                ("is_temporary", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_group_assignments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "assigned_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assignments",
                        to="tenants.permissiongroup",
                    ),
                ),
                (
                    "user_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permission_group_assignments",
                        to="tenants.tenantuserprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Permission Group Assignment",
                "verbose_name_plural": "User Permission Group Assignments",
                "db_table": "user_permission_group_assignments",
                "unique_together": {("user_profile", "group")},
            },
        ),
        migrations.CreateModel(
            name="UserEffectivePermissionsCache",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("effective_permissions", models.JSONField()),
                ("permission_summary", models.JSONField(default=dict)),
                ("scope_limitations", models.JSONField(default=dict)),
                ("cache_version", models.IntegerField(default=1)),
                ("calculated_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("designation_version", models.IntegerField(blank=True, null=True)),
                ("override_version", models.IntegerField(blank=True, null=True)),
                ("is_valid", models.BooleanField(default=True)),
                (
                    "user_profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permission_cache",
                        to="tenants.tenantuserprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Effective Permissions Cache",
                "verbose_name_plural": "User Effective Permissions Cache",
                "db_table": "user_effective_permissions_cache",
                "indexes": [
                    models.Index(
                        fields=["user_profile"], name="user_effect_user_pr_448539_idx"
                    ),
                    models.Index(
                        fields=["is_valid"], name="user_effect_is_vali_6f27dd_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="user_effect_expires_3f805d_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="permissionregistry",
            index=models.Index(
                fields=["tenant"], name="permission__tenant__c338ce_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="permissionregistry",
            index=models.Index(
                fields=["tenant", "permission_code"],
                name="permission__tenant__733fb7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="permissionregistry",
            index=models.Index(
                fields=["permission_category"], name="permission__permiss_eec442_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="permissionregistry",
            index=models.Index(
                fields=["permission_type"], name="permission__permiss_1161cb_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="permissionregistry",
            unique_together={("tenant", "permission_code")},
        ),
        migrations.AlterUniqueTogether(
            name="permissiongrouppermission",
            unique_together={("group", "permission")},
        ),
        migrations.AddIndex(
            model_name="permissiongroup",
            index=models.Index(
                fields=["tenant"], name="permission__tenant__7fd975_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="permissiongroup",
            index=models.Index(
                fields=["tenant", "group_code"], name="permission__tenant__afefe2_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="permissiongroup",
            unique_together={("tenant", "group_code")},
        ),
        migrations.AddIndex(
            model_name="permissionaudittrail",
            index=models.Index(
                fields=["tenant"], name="permission__tenant__0312ac_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="permissionaudittrail",
            index=models.Index(
                fields=["entity_type", "entity_id"],
                name="permission__entity__8ee572_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="permissionaudittrail",
            index=models.Index(
                fields=["performed_by"], name="permission__perform_6b3c2d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="permissionaudittrail",
            index=models.Index(
                fields=["performed_at"], name="permission__perform_32a661_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="designationbasepermission",
            index=models.Index(
                fields=["designation"], name="designation_designa_0de1b3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="designationbasepermission",
            index=models.Index(
                fields=["permission"], name="designation_permiss_8a7e32_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="designationbasepermission",
            index=models.Index(
                fields=["is_active"], name="designation_is_acti_5b2ac8_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="designationbasepermission",
            unique_together={("designation", "permission")},
        ),
    ]
