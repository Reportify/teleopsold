# Generated by Django 4.2.10 on 2025-07-21 12:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("tenants", "0010_add_dual_mode_vendor_operations"),
    ]

    operations = [
        migrations.AddField(
            model_name="tenantuserprofile",
            name="employment_type",
            field=models.CharField(
                default="Full-time",
                help_text="Employment type (Full-time, Part-time, Contract, etc.)",
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="tenantuserprofile",
            name="is_active",
            field=models.BooleanField(default=True),
        ),
        # First rename the old tenant_id field to avoid conflict
        migrations.RenameField(
            model_name="tenantuserprofile",
            old_name="tenant_id",
            new_name="old_tenant_id",
        ),
        # Add the new tenant ForeignKey field
        migrations.AddField(
            model_name="tenantuserprofile",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user_profiles",
                to="tenants.tenant",
            ),
        ),
        # Migrate data from old_tenant_id to new tenant field
        migrations.RunSQL(
            sql="UPDATE tenants_tenantuserprofile SET tenant_id = old_tenant_id WHERE old_tenant_id IS NOT NULL;",
            reverse_sql="UPDATE tenants_tenantuserprofile SET old_tenant_id = tenant_id WHERE tenant_id IS NOT NULL;",
        ),
        # Remove the old tenant_id field
        migrations.RemoveField(
            model_name="tenantuserprofile",
            name="old_tenant_id",
        ),
        migrations.AlterUniqueTogether(
            name="tenantuserprofile",
            unique_together={("user", "tenant")},
        ),
        migrations.CreateModel(
            name="Designation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Designation name", max_length=100),
                ),
                (
                    "level",
                    models.IntegerField(
                        default=1, help_text="Hierarchy level (1=lowest, 10=highest)"
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        help_text="Department this designation belongs to",
                        max_length=100,
                    ),
                ),
                (
                    "can_approve_tasks",
                    models.BooleanField(
                        default=False, help_text="Can approve tasks and assignments"
                    ),
                ),
                (
                    "can_manage_users",
                    models.BooleanField(
                        default=False,
                        help_text="Can manage users and their designations",
                    ),
                ),
                (
                    "can_view_analytics",
                    models.BooleanField(
                        default=False, help_text="Can access analytics and reports"
                    ),
                ),
                (
                    "geographic_scope",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Geographic areas this designation covers",
                    ),
                ),
                (
                    "functional_scope",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Functional areas this designation covers",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_system_defined",
                    models.BooleanField(
                        default=False, help_text="True for Super Admin and system roles"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this designation"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="designations",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "ordering": ["-level", "name"],
                "unique_together": {("tenant", "name")},
            },
        ),
        migrations.AddField(
            model_name="tenantuserprofile",
            name="designations",
            field=models.ManyToManyField(
                blank=True,
                help_text="Tenant-defined designations",
                related_name="users",
                to="tenants.designation",
            ),
        ),
    ]
