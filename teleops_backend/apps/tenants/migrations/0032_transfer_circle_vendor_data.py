# Generated by Django 5.2.4 on 2025-08-01 16:16

from django.db import migrations


def transfer_circle_vendor_data(apps, schema_editor):
    """
    Transfer data from circle_vendor_relationships to client_vendor_relationships
    """
    # Get the models
    ClientVendorRelationship = apps.get_model('tenants', 'ClientVendorRelationship')
    
    # Use raw SQL to access the old table
    db_alias = schema_editor.connection.alias
    with schema_editor.connection.cursor() as cursor:
        # Check if the old table still exists
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'circle_vendor_relationships'
            );
        """)
        table_exists = cursor.fetchone()[0]
        
        if table_exists:
            # Transfer data from old table to new table
            cursor.execute("""
                INSERT INTO client_vendor_relationships (
                    id, vendor_code, contact_person_name, performance_rating,
                    relationship_type, relationship_status, vendor_verification_status,
                    vendor_permissions, communication_allowed, contact_access_level,
                    approved_at, notes, is_active, created_at, updated_at,
                    approved_by_id, client_tenant_id, vendor_tenant_id
                )
                SELECT 
                    id, vendor_code, contact_person_name, performance_rating,
                    CASE 
                        WHEN relationship_type = 'Circle_Vendor' THEN 'Client_Vendor'
                        ELSE relationship_type
                    END as relationship_type,
                    CASE 
                        WHEN relationship_status = 'Circle_Invitation_Sent' THEN 'Client_Invitation_Sent'
                        ELSE relationship_status
                    END as relationship_status,
                    vendor_verification_status, vendor_permissions, communication_allowed, 
                    contact_access_level, approved_at, notes, is_active, created_at, updated_at,
                    approved_by_id, circle_tenant_id, vendor_tenant_id
                FROM circle_vendor_relationships;
            """)
            
            print(f"Transferred data from circle_vendor_relationships to client_vendor_relationships")


def reverse_transfer_circle_vendor_data(apps, schema_editor):
    """
    Reverse the data transfer (if needed)
    """
    ClientVendorRelationship = apps.get_model('tenants', 'ClientVendorRelationship')
    ClientVendorRelationship.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("tenants", "0031_rename_circle_vendor_to_client_vendor"),
    ]

    operations = [
        migrations.RunPython(
            transfer_circle_vendor_data,
            reverse_transfer_circle_vendor_data
        ),
    ]
